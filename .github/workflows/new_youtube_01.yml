name: 01 Fetch and Update YouTube Playlists

on:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12:00 UTC
  workflow_dispatch:

jobs:
  fetch-and-update-playlists:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch YouTube Playlists JSON
        run: |
          mkdir -p playlists

          declare -A PLAYLISTS
          PLAYLISTS["PL5ErBr2d3QJH0kbwTQ7HSuzvBb4zIWzhy"]="oleg_berg_playlist.json"
          PLAYLISTS["PLsvoYlzBrLFDoytiaDKjuCK6CNSRty38l"]="film_for_the_future_playlist.json"
          PLAYLISTS["PLTu_mo3y42N3OZ9y9C7FeWFWeaqCTJK56"]="LSD_playlist.json"

          API_KEY="${{ secrets.YOUTUBE_API_KEY }}"

          for PLAYLIST_ID in "${!PLAYLISTS[@]}"; do
            FILE_NAME="playlists/${PLAYLISTS[$PLAYLIST_ID]}"
            echo "Fetching playlist: $PLAYLIST_ID -> $FILE_NAME"

            RESPONSE=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${API_KEY}")

            echo "$RESPONSE" | jq '.' > "$FILE_NAME"

            if echo "$RESPONSE" | jq -e '.error' >/dev/null; then
              echo "Error fetching playlist: $PLAYLIST_ID"
              cat "$FILE_NAME"
              exit 1
            fi
          done

      - name: Request Access Token
        id: get_token
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          response=$(curl -s --request POST \
            --url 'https://api.getport.io/v1/auth/access_token' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'grant_type=client_credentials' \
            --data-urlencode "client_id=$CLIENT_ID" \
            --data-urlencode "client_secret=$CLIENT_SECRET" \
            --data-urlencode "scope=your_scope" \
            --data-urlencode "audience=your_audience")

          access_token=$(echo $response | jq -r '.access_token')

          if [[ -z "$access_token" || "$access_token" == "null" ]]; then
            echo "Error: Failed to retrieve access token!"
            echo "Response: $response"
            exit 1
          fi

          echo "::add-mask::$access_token"
          echo "access_token=$access_token" >> $GITHUB_OUTPUT

      - name: Create/Update Port Entities
        env:
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
        run: |
          for FILE in playlists/*.json; do
            echo "Processing $FILE"

            ID=$(jq -r '.items[0].snippet.playlistId' "$FILE")
            PUBLISHED_AT=$(jq -r '.items[0].snippet.publishedAt' "$FILE")
            CHANNEL_ID=$(jq -r '.items[0].snippet.channelId' "$FILE")
            TITLE=$(jq -r '.items[0].snippet.title' "$FILE")
            DESCRIPTION=$(jq -r '.items[0].snippet.description' "$FILE")
            THUMBNAILS=$(jq -r '.items[0].snippet.thumbnails' "$FILE" | jq -c '.')

            if [[ "$ID" == "null" || "$TITLE" == "null" ]]; then
              echo "Skipping invalid playlist: $FILE (No valid data)"
              continue
            fi

            PORT_PAYLOAD=$(jq -n \
              --arg id "$ID" \
              --arg publishedAt "$PUBLISHED_AT" \
              --arg channelId "$CHANNEL_ID" \
              --arg title "$TITLE" \
              --arg description "$DESCRIPTION" \
              --argjson thumbnails "$THUMBNAILS" \
              '{
                identifier: $id,
                title: $title,
                properties: {
                  id: $id,
                  publishedAt: $publishedAt,
                  channelId: $channelId,
                  title: $title,
                  description: $description,
                  thumbnails: $thumbnails
                }
              }')

            RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/blueprints/youtube_playlist/entities" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PORT_PAYLOAD")

            if echo "$RESPONSE" | jq -e '.error' >/dev/null; then
              echo "Error creating/updating entity for playlist ID: $ID"
              echo "Response: $RESPONSE"
              exit 1
            else
              echo "Successfully processed entity for playlist ID: $ID"
            fi
          done
