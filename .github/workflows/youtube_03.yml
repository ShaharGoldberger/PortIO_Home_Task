name: 03 Fetch and Post YouTube Playlists

on:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12:00 UTC
  workflow_dispatch:

jobs:
  fetch-and-update-playlists:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch YouTube Playlists JSON
        run: |
          mkdir -p playlists
          
          declare -A PLAYLISTS
          PLAYLISTS["PL2B246C13692AEA56"]="maroon5_short_playlist.json"

          API_KEY="${{ secrets.YOUTUBE_API_KEY }}"

          for PLAYLIST_ID in "${!PLAYLISTS[@]}"; do
            FILE_NAME="playlists/${PLAYLISTS[$PLAYLIST_ID]}"
            echo "Fetching playlist: $PLAYLIST_ID -> $FILE_NAME"

            NEXT_PAGE_TOKEN=""
            > "$FILE_NAME"

            while : ; do
              RESPONSE=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${API_KEY}&pageToken=${NEXT_PAGE_TOKEN}")
              
              echo "$RESPONSE" | jq '.items' >> "$FILE_NAME"

              NEXT_PAGE_TOKEN=$(echo "$RESPONSE" | jq -r '.nextPageToken // empty')
              if [ -z "$NEXT_PAGE_TOKEN" ]; then
                break
              fi
            done

            if jq -e '.error' "$FILE_NAME" >/dev/null; then
              echo "Error fetching playlist: $PLAYLIST_ID"
              cat "$FILE_NAME"
              exit 1
            fi
          done

      - name: Request Access Token
        id: get_token
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          response=$(curl -s --request POST \
            --url 'https://api.getport.io/v1/auth/access_token' \
            --header 'Content-Type: application/json' \
            --data '{"clientId":"'"$CLIENT_ID"'", "clientSecret":"'"$CLIENT_SECRET"'"}')

          access_token=$(echo "$response" | jq -r '.accessToken')

          if [[ -z "$access_token" || "$access_token" == "null" ]]; then
            echo "Error: Failed to retrieve access token!"
            exit 1
          fi

          echo "::add-mask::$access_token"
          echo "access_token=$access_token" >> $GITHUB_OUTPUT

      - name: Create/Update Port Entities
        env:
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
        shell: bash
        run: |
          for FILE in playlists/*.json; do
            echo "Processing $FILE"

            PLAYLIST_ID=$(jq -r '.items[0].snippet.playlistId // empty' "$FILE")
            if [ -z "$PLAYLIST_ID" ]; then
              echo "Skipping $FILE: PLAYLIST_ID is null or empty."
              echo "Error: No playlist ID found in $FILE. Skipping."
              continue
            fi

            PLAYLIST_TITLE=$(jq -r '.snippet.title // empty' "$FILE")
            PLAYLIST_DESCRIPTION=$(jq -r '.snippet.description // empty' "$FILE")

            # Construct the JSON payload for the playlist
            PLAYLIST_PAYLOAD=$(jq -n \
              --arg id "$PLAYLIST_ID" \
              --arg title "$PLAYLIST_TITLE" \
              --arg description "$PLAYLIST_DESCRIPTION" \
              '{
                identifier: $id,
                title: $title,
                properties: {
                  id: $id,
                  title: $title,
                  description: $description
                }
              }'
            )

            # Check if the playlist entity already exists
            GET_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://api.getport.io/v1/blueprints/youtube_playlist/entities/$PLAYLIST_ID" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json")

            if [ "$GET_RESPONSE" -eq 200 ]; then
              PLAYLIST_RESPONSE=$(curl -s -X PUT "https://api.getport.io/v1/blueprints/youtube_playlist/entities/$PLAYLIST_ID" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$PLAYLIST_PAYLOAD")
              ACTION="updated"
            else
              PLAYLIST_RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/blueprints/youtube_playlist/entities" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$PLAYLIST_PAYLOAD")
              ACTION="created"
            fi

            echo "Successfully ${ACTION} playlist entity for ID: $PLAYLIST_ID"

            JSON_TYPE=$(jq -r 'type' "$FILE")

            if [ "$JSON_TYPE" == "array" ]; then
              echo "Warning: JSON root is an array, expected an object."
              ITEMS_COUNT=$(jq 'length' "$FILE")
            else
              ITEMS_COUNT=$(jq '.items | length' "$FILE")
            fi

            if [ "$ITEMS_COUNT" -eq 0 ]; then
              echo "No items found in $FILE. Skipping."
              continue
            fi

            if [ "$JSON_TYPE" == "array" ]; then
              JQ_QUERY='.[]'
            else
              JQ_QUERY='.items[]'
            fi
            # Process each item in the playlist
            jq -c "$JQ_QUERY" "$FILE" | while read -r ITEM; do
              VIDEO_ID=$(echo "$ITEM" | jq -r '.snippet.resourceId.videoId')
              PUBLISHED_AT=$(echo "$ITEM" | jq -r '.snippet.publishedAt')
              CHANNEL_ID=$(echo "$ITEM" | jq -r '.snippet.channelId')
              TITLE=$(echo "$ITEM" | jq -r '.snippet.title')
              DESCRIPTION=$(echo "$ITEM" | jq -r '.snippet.description')
              THUMBNAILS=$(echo "$ITEM" | jq -c '.snippet.thumbnails')

              if [[ "$VIDEO_ID" == "null" || "$TITLE" == "null" ]]; then
                echo "Skipping invalid playlist item: $ITEM"
                continue
              fi

              # Construct the JSON payload for the playlist item
              ITEM_PAYLOAD=$(jq -n \
                --arg id "$VIDEO_ID" \
                --arg playlistId "$PLAYLIST_ID" \
                --arg publishedAt "$PUBLISHED_AT" \
                --arg channelId "$CHANNEL_ID" \
                --arg title "$TITLE" \
                --arg description "$DESCRIPTION" \
                --argjson thumbnails "$THUMBNAILS" \
                '{
                  identifier: $id,
                  title: $title,
                  properties: {
                    id: $id,
                    playlistId: $playlistId,
                    publishedAt: $publishedAt,
                    channelId: $channelId,
                    title: $title,
                    description: $description,
                    thumbnails: $thumbnails
                  },
                  relations: {
                    belongs_to: "$playlistId"
                  }
                }'
              )

              curl -s -X POST "https://api.getport.io/v1/blueprints/playlistItem/entities" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$ITEM_PAYLOAD"

              echo "Uploaded playlist item: $VIDEO_ID"
            done

            # Collect all video IDs            
            if [ "$JSON_TYPE" == "array" ]; then
              VIDEO_IDS=$(jq -c '[.[] | select(.snippet.resourceId.videoId != null) | .snippet.resourceId.videoId] // []' "$FILE")
            else
              VIDEO_IDS=$(jq -c '[.items[] | select(.snippet.resourceId.videoId != null) | .snippet.resourceId.videoId] // []' "$FILE")
            fi
            
            # if [ -z "$VIDEO_IDS" ] || [ "$VIDEO_IDS" == "[]" ]; then
            #   echo "Warning: No videos found for playlist $PLAYLIST_ID."
            # fi
            if ! echo "$VIDEO_IDS" | jq empty; then
              echo "Error: VIDEO_IDS is not valid JSON."
              continue
            fi

            # Update youtube_playlist entity with videos_in_playlist
            UPDATE_PLAYLIST_PAYLOAD=$(jq -n \
              --arg id "$PLAYLIST_ID" \
              --arg title "$PLAYLIST_TITLE" \
              --arg description "$PLAYLIST_DESCRIPTION" \
              --argjson videoIds "$VIDEO_IDS" \
              '{
                identifier: $id,
                title: $title,
                properties: {
                  id: $id,
                  title: $title,
                  description: $description
                },
                relations: {
                  videos_in_playlist: $videoIds
                }
              }'
            )

            curl -s -X PUT "https://api.getport.io/v1/blueprints/youtube_playlist/entities/$PLAYLIST_ID" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$UPDATE_PLAYLIST_PAYLOAD"

            echo "Updated playlist with videos: $PLAYLIST_ID"
          done
